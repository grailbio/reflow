val test = make("$/test")
val strings = make("$/strings")

val TestSort = {
	func eq(x, y [string]) = test.All([x == y | (x, y) <- zip(x, y)])
	eq(strings.Sort(["z", "a", "b"]), ["a", "b", "z"])
}

val TestSort2 = {
	val [x] = strings.Sort([delay("a")])
	x == "a"
}

val TestFromInt = strings.FromInt(1234567890) == "1234567890"

val TestFromFloatZero = strings.FromFloat(0.0, 1) == "0"
val TestFromFloat = strings.FromFloat(1.12121212, 2) == "1.1"
val TestFromFloat1 = strings.FromFloat(1.23456789012345678, 20) == "1.23456789012345678"

func floatEq(x, y, epsilon float) bool = if y > x { y - x < epsilon } else { x - y < epsilon }
val TestToFloatZero = strings.ToFloat("0") == 0.0
val TestToFloatZeroDecimal = strings.ToFloat("0.0") == 0.0
val TestToFloat1 = floatEq(strings.ToFloat("1.23"), 1.23, 0.01)
val TestToFloat2 = floatEq(strings.ToFloat("3.14"), 3.14, 0.01)
val TestToFloat3 = floatEq(strings.ToFloat("1.12121212"), 1.12, 0.01)
val TestToFloat4 = floatEq(strings.ToFloat("1.23456789012345678"), 1.23456789012345678, 0.00000000000000001)
val TestToFloat5 = floatEq(strings.ToFloat(".2"), 0.2, 0.1)
val TestToFloat6 = floatEq(strings.ToFloat("3e10"), 3e10, 0.00000000001)
val TestToFloat7 = floatEq(strings.ToFloat("0.5e-8"), 0.5e-8, 0.00000001)
val TestToFloat8 = floatEq(strings.ToFloat("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"), 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
val TestToFloat9 = floatEq(strings.ToFloat("-12.2"), -12.2, 0.1)
val TestStringFloatString = strings.FromFloat(strings.ToFloat(strings.FromFloat(1.23456789012345678, 20)), 20) == "1.23456789012345678"

val TestHasSuffix = strings.HasSuffix("hello world", "orld")
val TestHasPrefix = strings.HasPrefix("hello world", "hell")
val TestJoin = strings.Join(["a", "b", "c"], ",") == "a,b,c"
val TestJoin2 = strings.Join([delay("a")], ",") == "a"

val chunksSize100 = strings.Chunk("hello\tworld!!", 100)
val TestChunks100 = test.All([len(chunksSize100) == 1,
		len(chunksSize100[0]) == 13, chunksSize100[0] == "hello\tworld!!",
])

val chunksSize4 = strings.Chunk("hello\tworld!!", 4)
val TestChunks4 = test.All([len(chunksSize4) == 4,
		len(chunksSize4[0]) == 4, chunksSize4[0] == "hell",
		len(chunksSize4[1]) == 4, chunksSize4[1] == "o\two",
		len(chunksSize4[2]) == 4, chunksSize4[2] == "rld!",
		len(chunksSize4[3]) == 1, chunksSize4[3] == "!",
])

val chunksSize6 = strings.Chunk("这 \t a是否适用于 \t 复杂ef的 \n 字符串", 6)
val TestChunks6 = test.All([len(chunksSize6) == 9,
		len(chunksSize6[0]) == 6, chunksSize6[0] == "这 \t ",
		len(chunksSize6[1]) == 4, chunksSize6[1] == "a是",
		len(chunksSize6[2]) == 6, chunksSize6[2] == "否适",
		len(chunksSize6[3]) == 6, chunksSize6[3] == "用于",
		len(chunksSize6[4]) == 6, chunksSize6[4] == " \t 复",
		len(chunksSize6[5]) == 5, chunksSize6[5] == "杂ef",
		len(chunksSize6[6]) == 6, chunksSize6[6] == "的 \n ",
		len(chunksSize6[7]) == 6, chunksSize6[7] == "字符",
		len(chunksSize6[8]) == 3, chunksSize6[8] == "串",
])
