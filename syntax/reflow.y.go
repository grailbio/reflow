// Code generated by goyacc -o reflow.y.go -v reflow.y.output reflow.y. DO NOT EDIT.

//line reflow.y:2
package syntax

import __yyfmt__ "fmt"

//line reflow.y:2

import (
	"fmt"

	"github.com/grailbio/reflow/internal/scanner"
	"github.com/grailbio/reflow/types"
)

type posIdents struct {
	pos      scanner.Position
	idents   []string
	comments []string
}

type typearg struct {
	t1, t2 *types.T
}

//line reflow.y:23
type yySymType struct {
	yys int
	pos struct {
		scanner.Position
		comment string
	}
	expr       *Expr
	exprlist   []*Expr
	exprfield  *FieldExpr
	exprfields []*FieldExpr
	exprmap    map[*Expr]*Expr

	comprclauses []*ComprClause
	comprclause  *ComprClause

	typ         *types.T
	typlist     []*types.T
	typfield    *types.Field
	typfields   []*types.Field
	decl        *Decl
	decllist    []*Decl
	pat         *Pat
	patlist     []*Pat
	caseclause  *CaseClause
	caseclauses []*CaseClause
	tok         int
	template    *Template

	structpat struct {
		field string
		pat   *Pat
	}

	structpats []struct {
		field string
		pat   *Pat
	}

	listpats struct {
		list []*Pat
		tail *Pat
	}

	typearg  typearg
	typeargs []typearg

	variant  *types.Variant
	variants []*types.Variant

	module *ModuleImpl

	str string

	idents    []string
	posidents posIdents
}

const tokIdent = 57346
const tokExpr = 57347
const tokInt = 57348
const tokString = 57349
const tokBool = 57350
const tokFloat = 57351
const tokTemplate = 57352
const tokFile = 57353
const tokDir = 57354
const tokStruct = 57355
const tokModule = 57356
const tokExec = 57357
const tokAs = 57358
const tokAt = 57359
const tokVal = 57360
const tokFunc = 57361
const tokAssign = 57362
const tokArrow = 57363
const tokLeftArrow = 57364
const tokIf = 57365
const tokElse = 57366
const tokSwitch = 57367
const tokCase = 57368
const tokMake = 57369
const tokStartModule = 57370
const tokStartDecls = 57371
const tokStartExpr = 57372
const tokStartType = 57373
const tokStartPat = 57374
const tokKeyspace = 57375
const tokParam = 57376
const tokEllipsis = 57377
const tokReserved = 57378
const tokRequires = 57379
const tokType = 57380
const tokOrOr = 57381
const tokAndAnd = 57382
const tokLE = 57383
const tokGE = 57384
const tokNE = 57385
const tokEqEq = 57386
const tokLSH = 57387
const tokRSH = 57388
const tokSquiggleArrow = 57389
const tokEOF = 57390
const tokError = 57391
const first = 57392
const unary = 57393
const apply = 57394
const deref = 57395

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tokIdent",
	"tokExpr",
	"tokInt",
	"tokString",
	"tokBool",
	"tokFloat",
	"tokTemplate",
	"tokFile",
	"tokDir",
	"tokStruct",
	"tokModule",
	"tokExec",
	"tokAs",
	"tokAt",
	"tokVal",
	"tokFunc",
	"tokAssign",
	"tokArrow",
	"tokLeftArrow",
	"tokIf",
	"tokElse",
	"tokSwitch",
	"tokCase",
	"tokMake",
	"tokStartModule",
	"tokStartDecls",
	"tokStartExpr",
	"tokStartType",
	"tokStartPat",
	"tokKeyspace",
	"tokParam",
	"tokEllipsis",
	"tokReserved",
	"tokRequires",
	"tokType",
	"'{'",
	"'('",
	"'['",
	"tokOrOr",
	"tokAndAnd",
	"tokLE",
	"tokGE",
	"tokNE",
	"tokEqEq",
	"tokLSH",
	"tokRSH",
	"tokSquiggleArrow",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"'_'",
	"'!'",
	"'#'",
	"tokEOF",
	"tokError",
	"first",
	"unary",
	"'.'",
	"']'",
	"')'",
	"'}'",
	"apply",
	"deref",
	"':'",
	"','",
	"';'",
	"'='",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 57,
	76, 166,
	-2, 54,
}

const yyPrivate = 57344

const yyLast = 1146

var yyAct = [...]int{
	11, 97, 171, 231, 245, 61, 120, 336, 170, 165,
	256, 167, 32, 60, 89, 218, 90, 91, 176, 113,
	131, 249, 169, 119, 98, 95, 47, 104, 99, 117,
	356, 10, 108, 319, 283, 246, 127, 87, 86, 337,
	343, 244, 217, 49, 322, 83, 84, 111, 168, 235,
	77, 78, 304, 299, 79, 80, 81, 82, 305, 267,
	213, 237, 236, 199, 214, 88, 238, 235, 353, 182,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 163, 134,
	112, 198, 137, 300, 330, 199, 296, 199, 179, 230,
	178, 140, 212, 210, 204, 196, 188, 192, 193, 46,
	197, 33, 35, 36, 34, 185, 37, 38, 141, 42,
	184, 201, 187, 177, 44, 183, 46, 205, 33, 35,
	36, 34, 215, 37, 38, 349, 42, 60, 311, 221,
	297, 44, 225, 241, 41, 43, 40, 224, 351, 207,
	227, 206, 332, 324, 316, 314, 285, 269, 234, 250,
	250, 41, 43, 40, 209, 202, 203, 110, 48, 87,
	86, 338, 183, 334, 124, 240, 312, 211, 186, 109,
	280, 229, 279, 309, 247, 48, 251, 56, 122, 254,
	48, 259, 260, 252, 248, 288, 126, 88, 233, 346,
	226, 222, 242, 65, 264, 318, 216, 208, 191, 253,
	121, 166, 142, 107, 106, 270, 63, 64, 66, 265,
	50, 94, 93, 92, 282, 116, 257, 278, 268, 50,
	138, 286, 136, 221, 289, 274, 60, 67, 284, 258,
	9, 291, 287, 293, 292, 281, 50, 271, 92, 271,
	129, 301, 275, 276, 232, 54, 52, 53, 295, 307,
	273, 294, 306, 59, 54, 52, 53, 328, 298, 219,
	141, 329, 302, 173, 58, 321, 313, 51, 115, 55,
	320, 54, 52, 53, 323, 132, 51, 266, 55, 325,
	243, 327, 195, 317, 326, 164, 143, 333, 142, 133,
	335, 123, 105, 51, 339, 55, 1, 341, 65, 128,
	315, 172, 125, 331, 130, 272, 340, 135, 57, 65,
	344, 63, 64, 66, 63, 64, 66, 7, 239, 350,
	345, 347, 63, 64, 66, 348, 162, 96, 220, 292,
	114, 45, 257, 352, 118, 67, 100, 355, 342, 39,
	255, 354, 357, 67, 359, 361, 99, 362, 103, 63,
	64, 66, 364, 363, 178, 87, 86, 69, 70, 73,
	74, 75, 76, 83, 84, 85, 71, 72, 77, 78,
	67, 101, 79, 80, 81, 82, 2, 3, 4, 5,
	6, 310, 263, 88, 360, 358, 14, 28, 8, 12,
	62, 337, 87, 86, 69, 70, 73, 74, 75, 76,
	83, 84, 85, 71, 72, 77, 78, 139, 277, 79,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 246, 87,
	86, 69, 70, 73, 74, 75, 76, 83, 84, 85,
	71, 72, 77, 78, 0, 0, 79, 80, 81, 82,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 175,
	0, 0, 0, 0, 174, 87, 86, 69, 70, 73,
	74, 75, 76, 83, 84, 85, 71, 72, 77, 78,
	189, 0, 79, 80, 81, 82, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 190,
	87, 86, 69, 70, 73, 74, 75, 76, 83, 84,
	85, 71, 72, 77, 78, 0, 0, 79, 80, 81,
	82, 0, 18, 17, 29, 0, 0, 30, 88, 19,
	20, 0, 0, 22, 303, 0, 0, 21, 0, 0,
	0, 13, 0, 31, 0, 23, 87, 86, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 25, 24, 26,
	0, 0, 0, 79, 80, 81, 82, 0, 0, 0,
	0, 0, 16, 0, 88, 0, 0, 0, 0, 0,
	15, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 87, 86, 69, 70, 73, 74, 75,
	76, 83, 84, 85, 71, 72, 77, 78, 0, 0,
	79, 80, 81, 82, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 308, 87, 86, 69, 70, 73, 74,
	75, 76, 83, 84, 85, 71, 72, 77, 78, 0,
	0, 79, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 262, 87, 86, 69, 70, 73,
	74, 75, 76, 83, 84, 85, 71, 72, 77, 78,
	0, 0, 79, 80, 81, 82, 0, 0, 0, 0,
	0, 0, 0, 88, 46, 261, 33, 35, 36, 34,
	0, 37, 38, 0, 42, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	43, 40, 87, 86, 69, 70, 73, 74, 75, 76,
	83, 84, 85, 71, 72, 77, 78, 0, 0, 79,
	80, 81, 82, 48, 0, 0, 0, 0, 0, 0,
	88, 228, 0, 0, 0, 0, 0, 223, 166, 87,
	86, 69, 70, 73, 74, 75, 76, 83, 84, 85,
	71, 72, 77, 78, 0, 0, 79, 80, 81, 82,
	0, 46, 0, 33, 35, 36, 34, 88, 37, 38,
	0, 42, 0, 0, 87, 86, 44, 70, 73, 74,
	75, 76, 83, 84, 0, 71, 72, 77, 78, 0,
	0, 79, 80, 81, 82, 0, 41, 43, 40, 0,
	0, 0, 88, 0, 194, 87, 86, 69, 70, 73,
	74, 75, 76, 83, 84, 85, 71, 72, 77, 78,
	48, 0, 79, 80, 81, 82, 0, 0, 0, 0,
	0, 0, 200, 88, 87, 86, 69, 70, 73, 74,
	75, 76, 83, 84, 85, 71, 72, 77, 78, 0,
	0, 79, 80, 81, 82, 0, 0, 0, 68, 0,
	0, 0, 88, 87, 86, 69, 70, 73, 74, 75,
	76, 83, 84, 85, 71, 72, 77, 78, 0, 0,
	79, 80, 81, 82, 0, 0, 0, 0, 0, 0,
	0, 88, 87, 86, 69, 70, 73, 74, 75, 76,
	83, 84, 0, 71, 72, 77, 78, 0, 0, 79,
	80, 81, 82, 0, 0, 0, 0, 87, 86, 0,
	88, 73, 74, 75, 76, 83, 84, 0, 71, 72,
	77, 78, 0, 0, 79, 80, 81, 82, 0, 180,
	17, 29, 0, 0, 30, 88, 19, 20, 0, 0,
	22, 0, 63, 64, 181, 0, 0, 0, 13, 0,
	31, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 25, 24, 26, 0, 0, 0,
	18, 17, 29, 0, 0, 30, 0, 19, 20, 16,
	0, 22, 0, 0, 0, 21, 0, 15, 27, 13,
	0, 31, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 25, 24, 26, 46, 0,
	33, 35, 36, 34, 0, 37, 38, 0, 42, 0,
	16, 0, 0, 44, 0, 290, 0, 0, 15, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 41, 43, 40, 46, 0, 33, 35,
	36, 34, 0, 37, 38, 0, 42, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 43, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48,
}

var yyPact = [...]int{
	358, -1000, 207, -1000, 1006, 1082, 242, 123, -1000, 269,
	199, 824, -1000, 1006, -1000, 1006, 1006, -1000, -1000, -1000,
	-1000, 183, 182, 181, 1006, 342, 528, 298, -1000, 174,
	173, 1006, 115, -1000, -1000, -1000, -1000, -1000, -1000, 99,
	1082, 274, 186, 1082, 170, 133, -1000, -1000, 297, 110,
	-1000, -1000, 242, 242, 281, 295, -1000, 198, -1000, -1000,
	16, -1000, -1000, 193, 242, 250, 294, 292, -1000, 1006,
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 291, 729,
	129, 129, 274, 307, 268, 399, 48, 965, -1000, -7,
	98, 40, 109, 31, 435, 168, 1006, 1006, 795, -1000,
	288, 36, 20, -1000, 787, -1000, 274, 96, 29, -1000,
	1082, 1082, 127, 167, -1000, 94, 28, -1000, 108, 27,
	-11, -1000, 58, 166, 315, -34, 229, -1000, 161, -1000,
	690, 1006, 160, 1082, 764, 907, -3, -3, -3, -3,
	-3, -3, 516, 516, 129, 129, 129, 129, 129, 129,
	882, 692, 24, 853, -1000, 230, -1000, 88, 22, -8,
	-1000, -1000, 250, -9, 1006, -1000, 72, 286, -35, 362,
	250, 208, -1000, 1006, 125, 1006, -1000, 124, 1006, 216,
	1006, 1006, 625, 594, -1000, -1000, -1000, 1082, -1000, 274,
	283, -1000, -12, -1000, 1082, -1000, 87, -1000, 1082, -1000,
	242, -1000, 225, -1000, 281, 242, 242, -1000, -1000, -1000,
	105, -1000, 307, 1006, -43, 853, 274, -1000, -1000, 86,
	1006, -1000, 172, 965, 1044, 307, 1082, -1000, 307, 21,
	853, -1000, -1000, 51, -1000, 69, -1000, 853, -1000, 18,
	1006, 853, -1000, 18, 470, -17, -1000, 240, 1006, 853,
	563, -1000, -1000, 112, 107, -1000, -1000, -1000, -1000, 1082,
	85, -1000, -1000, 242, -1000, -1000, 84, 135, -44, 1006,
	271, -26, 853, 1006, 83, -1000, 853, -1000, 1006, 362,
	1006, 246, -1000, 261, 19, 82, 1006, -1000, 104, 1006,
	-1000, 325, 102, 1006, -1000, 216, 1006, 853, -1000, -1000,
	-1000, 242, -1000, -1000, -1000, -1000, -1000, -36, -1000, 1006,
	853, -1000, -37, 853, 122, 729, 64, 853, 1006, -1000,
	307, 78, -1000, 853, -1000, 325, -1000, -1000, -1000, 853,
	-1000, 853, -6, -1000, 853, 304, 1006, -47, 230, -1000,
	853, -1000, -1000, 965, -1000, 853, 1006, -1000, -41, 853,
	-1000, 965, 853, -1000, 853,
}

var yyPgo = [...]int{
	0, 31, 1, 22, 15, 418, 417, 5, 400, 2,
	8, 0, 399, 398, 397, 9, 3, 396, 395, 394,
	392, 391, 381, 21, 358, 350, 10, 349, 6, 23,
	344, 29, 48, 19, 11, 26, 341, 340, 338, 24,
	337, 336, 328, 327, 318, 317, 36, 315, 20, 314,
	312, 196, 309, 306, 7, 18, 4,
}

var yyR1 = [...]int{
	0, 53, 53, 53, 53, 53, 27, 27, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 36, 36, 35, 35, 37, 37, 33, 32,
	32, 29, 29, 30, 30, 31, 46, 46, 46, 46,
	46, 46, 46, 52, 52, 47, 47, 50, 51, 51,
	49, 49, 48, 48, 1, 1, 2, 2, 3, 3,
	3, 10, 10, 5, 5, 9, 9, 7, 7, 7,
	7, 7, 8, 6, 6, 4, 4, 4, 38, 38,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 16, 16, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	14, 15, 17, 20, 20, 21, 18, 18, 19, 25,
	25, 26, 26, 56, 56, 40, 40, 39, 39, 22,
	22, 22, 23, 23, 42, 42, 41, 41, 24, 24,
	34, 43, 13, 13, 44, 44, 45, 45, 45, 55,
	55, 54, 54,
}

var yyR2 = [...]int{
	0, 3, 3, 3, 3, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 3, 4, 3,
	5, 1, 1, 3, 5, 2, 1, 3, 2, 1,
	3, 1, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 2, 5, 1, 3, 1, 2, 1, 1, 3,
	1, 3, 1, 3, 0, 3, 2, 3, 0, 1,
	3, 1, 1, 0, 3, 1, 1, 7, 2, 3,
	7, 8, 3, 3, 4, 2, 3, 4, 1, 3,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 1,
	4, 5, 3, 2, 2, 2, 5, 1, 1, 1,
	1, 6, 7, 6, 4, 7, 6, 4, 4, 6,
	3, 4, 6, 5, 2, 5, 3, 1, 4, 4,
	5, 5, 5, 0, 2, 5, 1, 1, 2, 1,
	3, 3, 2, 0, 1, 1, 3, 1, 3, 0,
	1, 3, 3, 4, 1, 3, 1, 3, 3, 5,
	1, 3, 0, 2, 0, 3, 0, 2, 4, 0,
	1, 0, 1,
}

var yyChk = [...]int{
	-1000, -53, 28, 29, 30, 31, 32, -43, -13, 33,
	-1, -11, -12, 23, -17, 62, 54, 5, 4, 11,
	12, 19, 15, 27, 40, 39, 41, 63, -14, 6,
	9, 25, -28, 6, 9, 7, 8, 11, 12, -27,
	41, 39, 14, 40, 19, -36, 4, -35, 63, -46,
	4, 61, 40, 41, 39, 63, 64, -44, 5, 64,
	-9, -7, -8, 17, 18, 4, 19, 38, 64, 42,
	43, 51, 52, 44, 45, 46, 47, 53, 54, 57,
	58, 59, 60, 48, 49, 50, 41, 40, 68, -11,
	-11, -11, 40, 40, 40, -11, -40, -2, -39, -9,
	4, -22, 74, -24, -11, 4, 40, 40, -11, 64,
	68, -28, -32, -33, -37, 4, 39, -31, -30, -29,
	-28, 40, 55, 4, 64, -50, -51, -46, -52, -51,
	-49, -48, 4, 4, -1, -45, 34, 76, 37, -6,
	-46, 20, 4, 4, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -41, -11, 4, -15, 39, -34, -32, -3,
	-10, -9, 4, 5, 75, 70, -55, 75, -9, -11,
	4, 19, 76, 74, -55, 75, 69, -55, 75, 55,
	74, 40, -11, -11, 39, 4, 69, 74, 71, 75,
	75, -28, -32, 70, 75, -28, -31, -35, 40, 70,
	75, 69, 75, 71, 75, 74, 40, 76, -4, 40,
	-38, 4, 40, 77, -28, -11, 40, -28, 69, -55,
	75, -16, 24, -1, 70, 75, 70, 70, 75, -42,
	-11, 71, -39, 4, 76, -56, 76, -11, 69, -23,
	35, -11, 69, -23, -11, -25, -26, -46, 23, -11,
	-11, 70, 70, -20, -28, -33, 4, 71, -29, 70,
	-28, -46, -47, 35, -48, -46, -46, -5, -28, 77,
	75, -3, -11, 77, -34, 70, -11, -15, 23, -11,
	21, -28, -10, -28, -3, -55, 75, 71, -55, 35,
	75, -11, -55, 74, 69, 75, 22, -11, 70, 71,
	-21, 26, 69, -28, 70, -46, 70, -4, 70, 77,
	-11, 4, 70, -11, 70, -11, -56, -11, 21, 10,
	75, -55, 70, -11, 69, -11, -54, 76, 69, -11,
	-26, -11, -46, 76, -11, -54, 77, -28, -15, 71,
	-11, 70, -54, 74, -7, -11, 77, -16, -18, -11,
	-19, -2, -11, -56, -11,
}

var yyDef = [...]int{
	0, -2, 162, 54, 0, 0, 0, 0, 164, 0,
	0, 0, 80, 0, 99, 0, 0, 107, 108, 109,
	110, 0, 0, 0, 0, 0, 149, 0, 127, 0,
	0, 0, 0, 8, 9, 10, 11, 12, 13, 14,
	0, 0, 0, 0, 0, 21, 6, 22, 0, 0,
	36, 37, 0, 0, 0, 0, 1, -2, 163, 2,
	0, 65, 66, 0, 0, 0, 0, 0, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 0, 58, 0, 0, 169, 0, 145, 0,
	147, 169, 0, 169, 150, 124, 0, 0, 0, 4,
	0, 0, 0, 29, 0, 26, 0, 0, 35, 33,
	31, 0, 0, 25, 5, 0, 47, 48, 0, 43,
	0, 50, 52, 41, 161, 0, 0, 55, 0, 68,
	0, 0, 0, 0, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 0, 169, 156, 102, 0, 54, 0, 160, 0,
	59, 61, 62, 0, 0, 126, 0, 170, 0, 143,
	108, 0, 56, 0, 0, 170, 120, 0, 170, 0,
	0, 0, 0, 0, 133, 7, 15, 0, 17, 0,
	0, 28, 0, 19, 0, 32, 0, 23, 0, 38,
	0, 39, 0, 40, 0, 0, 0, 165, 167, 63,
	0, 78, 58, 0, 0, 69, 0, 72, 100, 0,
	170, 98, 0, 0, 0, 0, 0, 114, 58, 169,
	154, 117, 146, 147, 57, 0, 144, 148, 118, 169,
	0, 151, 121, 169, 0, 0, 139, 0, 0, 158,
	0, 128, 129, 0, 0, 30, 27, 18, 34, 0,
	0, 49, 44, 45, 51, 53, 0, 0, 75, 0,
	0, 0, 73, 0, 0, 101, 157, 105, 0, 143,
	0, 0, 60, 0, 169, 0, 170, 130, 0, 0,
	170, 171, 0, 0, 123, 0, 0, 142, 125, 132,
	134, 0, 16, 20, 24, 46, 42, 0, 168, 0,
	76, 79, 171, 74, 0, 0, 0, 111, 0, 113,
	170, 0, 116, 155, 119, 171, 152, 172, 122, 159,
	140, 141, 0, 64, 77, 0, 0, 0, 0, 131,
	112, 115, 153, 0, 67, 70, 0, 106, 143, 136,
	137, 0, 71, 135, 138,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 62, 3, 63, 3, 59, 60, 3,
	40, 70, 57, 53, 75, 54, 68, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 74, 76,
	51, 77, 52, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 41, 3, 69, 56, 61, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 39, 55, 71,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 64, 65, 66, 67,
	72, 73,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:143
		{
			yylex.(*Parser).Module = yyDollar[2].module
			return 0
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:148
		{
			yylex.(*Parser).Decls = yyDollar[2].decllist
			return 0
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:153
		{
			yylex.(*Parser).Expr = yyDollar[2].expr
			return 0
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:158
		{
			yylex.(*Parser).Type = yyDollar[2].typ
			return 0
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:163
		{
			yylex.(*Parser).Pat = yyDollar[2].pat
			return 0
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:174
		{
			yyVAL.idents = []string{yyDollar[1].expr.Ident}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:176
		{
			yyVAL.idents = append(yyDollar[1].idents, yyDollar[3].expr.Ident)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:179
		{
			yyVAL.typ = types.Int
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:180
		{
			yyVAL.typ = types.Float
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:181
		{
			yyVAL.typ = types.String
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:182
		{
			yyVAL.typ = types.Bool
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:183
		{
			yyVAL.typ = types.File
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:184
		{
			yyVAL.typ = types.Dir
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:185
		{
			yyVAL.typ = types.Ref(yyDollar[1].idents...)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:186
		{
			yyVAL.typ = types.List(yyDollar[2].typ)
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:188
		{
			yyVAL.typ = types.Map(yyDollar[2].typ, yyDollar[4].typ)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:190
		{
			yyVAL.typ = types.Struct(yyDollar[2].typfields...)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:192
		{
			yyVAL.typ = types.Module(yyDollar[3].typfields, nil)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:194
		{
			switch len(yyDollar[2].typfields) {
			// "()" is unit
			case 0:
				yyVAL.typ = types.Unit
				// "(type)" and "(name type)" get collapsed with
			// (optional) label
			case 1:
				yyVAL.typ = types.Labeled(yyDollar[2].typfields[0].Name, yyDollar[2].typfields[0].T)
				// a regular tuple must have at least two members
			default:
				yyVAL.typ = types.Tuple(yyDollar[2].typfields...)
			}
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:206
		{
			yyVAL.typ = types.Func(yyDollar[5].typ, yyDollar[3].typfields...)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:208
		{
			yyVAL.typ = types.Sum(yyDollar[1].variants...)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:212
		{
			yyVAL.variants = []*types.Variant{yyDollar[1].variant}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:214
		{
			yyVAL.variants = append(yyDollar[1].variants, yyDollar[3].variant)
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:218
		{
			yyVAL.variant = &types.Variant{Tag: yyDollar[2].expr.Ident, Elem: yyDollar[4].typ}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:220
		{
			yyVAL.variant = &types.Variant{Tag: yyDollar[2].expr.Ident}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:224
		{
			yyVAL.idents = []string{yyDollar[1].expr.Ident}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:226
		{
			yyVAL.idents = append(yyDollar[1].idents, yyDollar[3].expr.Ident)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:230
		{
			for _, name := range yyDollar[1].idents {
				yyVAL.typfields = append(yyVAL.typfields, &types.Field{Name: name, T: yyDollar[2].typ})
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:238
		{
			yyVAL.typfields = yyDollar[1].typfields
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:240
		{
			yyVAL.typfields = append(yyDollar[1].typfields, yyDollar[3].typfields...)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:244
		{
			yyVAL.typearg = typearg{yyDollar[1].typ, nil}
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:246
		{
			yyVAL.typearg = typearg{yyDollar[1].typ, yyDollar[2].typ}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:250
		{
			yyVAL.typeargs = []typearg{yyDollar[1].typearg}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:252
		{
			yyVAL.typeargs = append(yyDollar[1].typeargs, yyDollar[3].typearg)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:261
		{
			var (
				fields []*types.Field
				group  []*types.T
			)
			for _, arg := range yyDollar[1].typeargs {
				group = append(group, arg.t1)
				if arg.t2 != nil { // x, y, z t2
					// We have a group: check that they are all
					// idents, and convert them accordingly.
					for _, id := range group {
						if id.Kind != types.RefKind {
							yylex.Error(fmt.Sprintf("expected identifier, found %s", id))
							goto Fail
						}
						if len(id.Path) != 1 {
							yylex.Error(fmt.Sprintf("non-simple argument name"))
							goto Fail
						}
						fields = append(fields, &types.Field{Name: id.Path[0], T: arg.t2})
					}
					group = nil
				}
			}
			if len(group) > 0 {
				if len(fields) > 0 {
					yylex.Error("cannot mix named and unnamed arguments")
					goto Fail
				}
				// Only unnamed arguments: they are all types.
				for _, t := range group {
					fields = append(fields, &types.Field{T: t})
				}
			}
			yyVAL.typfields = fields
		Fail:
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:303
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].expr.Position, Kind: PatIdent, Ident: yyDollar[1].expr.Ident}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:305
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatIgnore}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:307
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatTuple, List: yyDollar[2].patlist}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:309
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatList, List: yyDollar[2].listpats.list, Tail: yyDollar[2].listpats.tail}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:311
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatStruct, Fields: make([]PatField, len(yyDollar[2].structpats))}
			for i, p := range yyDollar[2].structpats {
				yyVAL.pat.Fields[i] = PatField{p.field, p.pat}
			}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:318
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatVariant, Tag: yyDollar[2].expr.Ident}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:320
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatVariant, Tag: yyDollar[2].expr.Ident, Elem: yyDollar[4].pat}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:324
		{
			yyVAL.listpats = struct {
				list []*Pat
				tail *Pat
			}{
				list: yyDollar[1].patlist,
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:331
		{
			yyVAL.listpats = struct {
				list []*Pat
				tail *Pat
			}{
				list: yyDollar[1].patlist,
				tail: yyDollar[3].pat,
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:341
		{
			yyVAL.pat = &Pat{Position: yyDollar[1].pos.Position, Kind: PatIgnore}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:343
		{
			yyVAL.pat = yyDollar[2].pat
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:350
		{
			yyVAL.patlist = []*Pat{yyDollar[1].pat}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:352
		{
			yyVAL.patlist = append(yyDollar[1].patlist, yyDollar[3].pat)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:356
		{
			yyVAL.structpats = []struct {
				field string
				pat   *Pat
			}{yyDollar[1].structpat}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:361
		{
			yyVAL.structpats = append(yyDollar[1].structpats, yyDollar[3].structpat)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:365
		{
			yyVAL.structpat = struct {
				field string
				pat   *Pat
			}{yyDollar[1].expr.Ident, &Pat{Kind: PatIdent, Ident: yyDollar[1].expr.Ident}}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:370
		{
			yyVAL.structpat = struct {
				field string
				pat   *Pat
			}{yyDollar[1].expr.Ident, yyDollar[3].pat}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:378
		{
			yyVAL.decllist = nil
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:380
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[2].decl)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:384
		{
			yyVAL.decllist = []*Decl{yyDollar[1].decl}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:386
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[2].decl)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:389
		{
			yyVAL.decllist = nil
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:391
		{
			yyVAL.decllist = []*Decl{yyDollar[1].decl}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:393
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[3].decl)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:397
		{
			yyVAL.decl = &Decl{
				Position: yyDollar[1].expr.Position,
				Comment:  yyDollar[1].expr.Comment,
				Pat:      &Pat{Position: yyDollar[1].expr.Position, Kind: PatIdent, Ident: yyDollar[1].expr.Ident},
				Kind:     DeclAssign,
				Expr:     &Expr{Kind: ExprIdent, Ident: yyDollar[1].expr.Ident},
			}
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:408
		{
			yyVAL.decllist = nil
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:410
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[2].decllist...)
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line reflow.y:415
		{
			yyDollar[7].decl.Expr = &Expr{Position: yyDollar[7].decl.Expr.Position, Kind: ExprRequires, Left: yyDollar[7].decl.Expr, Decls: yyDollar[4].decllist}
			yyDollar[7].decl.Comment = yyDollar[1].pos.comment
			yyVAL.decl = yyDollar[7].decl
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:421
		{
			yyVAL.decl = yyDollar[2].decl
			yyVAL.decl.Comment = yyDollar[1].pos.comment
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:426
		{
			yyVAL.decl = &Decl{Position: yyDollar[1].expr.Position, Comment: yyDollar[1].expr.Comment, Pat: &Pat{Position: yyDollar[1].expr.Position, Kind: PatIdent, Ident: yyDollar[1].expr.Ident}, Kind: DeclAssign, Expr: yyDollar[3].expr}
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line reflow.y:428
		{
			yyVAL.decl = &Decl{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Pat: &Pat{Position: yyDollar[1].pos.Position, Kind: PatIdent, Ident: yyDollar[2].expr.Ident}, Kind: DeclAssign, Expr: &Expr{
				Kind: ExprFunc,
				Args: yyDollar[4].typfields,
				Left: yyDollar[7].expr}}
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
//line reflow.y:433
		{
			yyVAL.decl = &Decl{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Pat: &Pat{Position: yyDollar[1].pos.Position, Kind: PatIdent, Ident: yyDollar[2].expr.Ident}, Kind: DeclAssign, Expr: &Expr{
				Position: yyDollar[1].pos.Position,
				Kind:     ExprAscribe,
				Type:     types.Func(yyDollar[6].typ, yyDollar[4].typfields...),
				Left:     &Expr{Kind: ExprFunc, Args: yyDollar[4].typfields, Left: yyDollar[8].expr}}}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:441
		{
			yyVAL.decl = &Decl{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: DeclType, Ident: yyDollar[2].expr.Ident, Type: yyDollar[3].typ}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:445
		{
			yyVAL.decl = &Decl{Position: yyDollar[3].expr.Position, Pat: yyDollar[1].pat, Kind: DeclAssign, Expr: yyDollar[3].expr}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:447
		{
			yyVAL.decl = &Decl{
				Position: yyDollar[4].expr.Position,
				Pat:      yyDollar[1].pat,
				Kind:     DeclAssign,
				Expr: &Expr{
					Position: yyDollar[4].expr.Position,
					Kind:     ExprAscribe,
					Type:     yyDollar[2].typ,
					Left:     yyDollar[4].expr,
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:463
		{
			yyVAL.decllist = nil
			for i := range yyDollar[1].posidents.idents {
				yyVAL.decllist = append(yyVAL.decllist, &Decl{
					Position: yyDollar[1].posidents.pos,
					Comment:  yyDollar[1].posidents.comments[i],
					Ident:    yyDollar[1].posidents.idents[i],
					Kind:     DeclDeclare,
					Type:     yyDollar[2].typ,
				})
			}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:476
		{
			if len(yyDollar[1].posidents.idents) != 1 {
				yyVAL.decllist = []*Decl{{Kind: DeclError}}
			} else {
				yyVAL.decllist = []*Decl{{Position: yyDollar[1].posidents.pos, Comment: yyDollar[1].posidents.comments[0], Pat: &Pat{Position: yyDollar[1].posidents.pos, Kind: PatIdent, Ident: yyDollar[1].posidents.idents[0]}, Kind: DeclAssign, Expr: yyDollar[3].expr}}
			}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:484
		{
			if len(yyDollar[1].posidents.idents) != 1 {
				yyVAL.decllist = []*Decl{{Kind: DeclError}}
			} else {
				yyVAL.decllist = []*Decl{{
					Position: yyDollar[1].posidents.pos,
					Comment:  yyDollar[1].posidents.comments[0],
					Pat:      &Pat{Position: yyDollar[1].posidents.pos, Kind: PatIdent, Ident: yyDollar[1].posidents.idents[0]},
					Kind:     DeclAssign,
					Expr:     &Expr{Kind: ExprAscribe, Position: yyDollar[1].posidents.pos, Type: yyDollar[2].typ, Left: yyDollar[4].expr},
				}}
			}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:500
		{
			yyVAL.posidents = posIdents{yyDollar[1].expr.Position, []string{yyDollar[1].expr.Ident}, []string{yyDollar[1].expr.Comment}}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:502
		{
			yyVAL.posidents = posIdents{yyDollar[1].posidents.pos, append(yyDollar[1].posidents.idents, yyDollar[3].expr.Ident), append(yyDollar[1].posidents.comments, yyDollar[3].expr.Comment)}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:508
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "||", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:510
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "&&", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:512
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "<", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:514
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: ">", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:516
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "<=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:518
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: ">=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:520
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "!=", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:522
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "==", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:524
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "+", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:526
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "-", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:528
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "*", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:530
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "/", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:532
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "%", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:534
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "&", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:536
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "<<", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:538
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: ">>", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:540
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprBinop, Op: "~>", Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:542
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprCond, Cond: yyDollar[2].expr, Left: yyDollar[3].expr, Right: yyDollar[4].expr}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:545
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprIndex, Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:547
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprApply, Left: yyDollar[1].expr, Fields: yyDollar[3].exprfields}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:549
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Kind: ExprDeref, Left: yyDollar[1].expr, Ident: yyDollar[3].expr.Ident}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:551
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprUnop, Op: "!", Left: yyDollar[2].expr}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:553
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprUnop, Op: "-", Left: yyDollar[2].expr}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:557
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprBlock, Left: yyDollar[2].expr}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:559
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprCond, Cond: yyDollar[3].expr, Left: yyDollar[4].expr, Right: yyDollar[5].expr}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:566
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprIdent, Ident: "file"}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:568
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprIdent, Ident: "dir"}
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line reflow.y:570
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprFunc, Args: yyDollar[3].typfields, Left: yyDollar[6].expr}
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
//line reflow.y:572
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprAscribe, Type: yyDollar[5].typ, Left: &Expr{
				Position: yyDollar[7].expr.Position, Kind: ExprFunc, Args: yyDollar[3].typfields, Left: yyDollar[7].expr}}
		}
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
//line reflow.y:575
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprExec, Decls: yyDollar[3].decllist, Type: yyDollar[5].typ, Template: yyDollar[6].template}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:577
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprMake, Left: yyDollar[3].expr}
		}
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
//line reflow.y:579
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprMake, Left: yyDollar[3].expr, Decls: yyDollar[5].decllist}
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line reflow.y:581
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprTuple, Fields: append([]*FieldExpr{{Expr: yyDollar[2].expr}}, yyDollar[4].exprfields...)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:583
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprStruct, Fields: yyDollar[2].exprfields}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:585
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprList, List: yyDollar[2].exprlist}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line reflow.y:587
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprList, List: yyDollar[2].exprlist}
			for _, list := range yyDollar[4].exprlist {
				yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprBinop, Op: "+", Left: yyVAL.expr, Right: list}
			}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:594
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprMap}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:596
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprMap, Map: yyDollar[2].exprmap}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line reflow.y:598
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprMap, Map: yyDollar[2].exprmap}
			for _, list := range yyDollar[4].exprlist {
				yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Kind: ExprBinop, Op: "+", Left: list, Right: yyVAL.expr}
			}
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:605
		{
			yyVAL.expr = &Expr{
				Position:     yyDollar[1].pos.Position,
				Comment:      yyDollar[1].pos.comment,
				Kind:         ExprCompr,
				ComprExpr:    yyDollar[2].expr,
				ComprClauses: yyDollar[4].comprclauses,
			}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:615
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprVariant, Ident: yyDollar[2].expr.Ident}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:617
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprVariant, Ident: yyDollar[2].expr.Ident, Left: yyDollar[4].expr}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:619
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:622
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Comment: yyDollar[1].expr.Comment, Kind: ExprBuiltin, Op: "int", Fields: []*FieldExpr{{Expr: yyDollar[3].expr}}}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:624
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].expr.Position, Comment: yyDollar[1].expr.Comment, Kind: ExprBuiltin, Op: "float", Fields: []*FieldExpr{{Expr: yyDollar[3].expr}}}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:628
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprBlock, Decls: yyDollar[2].decllist, Left: yyDollar[3].expr}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:632
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprBlock, Decls: yyDollar[2].decllist, Left: yyDollar[3].expr}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:636
		{
			yyVAL.expr = &Expr{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Kind: ExprSwitch, Left: yyDollar[2].expr, CaseClauses: yyDollar[4].caseclauses}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:639
		{
			yyVAL.caseclauses = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:641
		{
			yyVAL.caseclauses = append(yyDollar[1].caseclauses, yyDollar[2].caseclause)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:645
		{
			yyVAL.caseclause = &CaseClause{Position: yyDollar[1].pos.Position, Comment: yyDollar[1].pos.comment, Pat: yyDollar[2].pat, Expr: yyDollar[4].expr}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:651
		{
			yyVAL.expr = &Expr{Kind: ExprBlock, Decls: yyDollar[1].decllist, Left: yyDollar[2].expr}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:655
		{
			yyVAL.comprclauses = []*ComprClause{yyDollar[1].comprclause}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:657
		{
			yyVAL.comprclauses = append(yyDollar[1].comprclauses, yyDollar[3].comprclause)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:661
		{
			yyVAL.comprclause = &ComprClause{Kind: ComprEnum, Pat: yyDollar[1].pat, Expr: yyDollar[3].expr}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:663
		{
			yyVAL.comprclause = &ComprClause{Kind: ComprFilter, Expr: yyDollar[2].expr}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:670
		{
			yyVAL.exprfields = []*FieldExpr{yyDollar[1].exprfield}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:672
		{
			yyVAL.exprfields = append(yyDollar[1].exprfields, yyDollar[3].exprfield)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:676
		{
			yyVAL.exprfield = &FieldExpr{Name: yyDollar[1].expr.Ident, Expr: &Expr{Position: yyDollar[1].expr.Position, Kind: ExprIdent, Ident: yyDollar[1].expr.Ident}}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:678
		{
			yyVAL.exprfield = &FieldExpr{Name: yyDollar[1].expr.Ident, Expr: yyDollar[3].expr}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:681
		{
			yyVAL.exprlist = nil
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:683
		{
			yyVAL.exprlist = []*Expr{yyDollar[1].expr}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:685
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:689
		{
			yyVAL.exprlist = []*Expr{yyDollar[2].expr}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:691
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:695
		{
			yyVAL.exprfields = []*FieldExpr{{Expr: yyDollar[1].expr}}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:697
		{
			yyVAL.exprfields = append(yyDollar[1].exprfields, &FieldExpr{Expr: yyDollar[3].expr})
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line reflow.y:701
		{
			yyVAL.exprfields = []*FieldExpr{{Expr: yyDollar[1].expr}}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:703
		{
			yyVAL.exprfields = append(yyDollar[1].exprfields, &FieldExpr{Expr: yyDollar[3].expr})
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:707
		{
			yyVAL.exprmap = map[*Expr]*Expr{yyDollar[1].expr: yyDollar[3].expr}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line reflow.y:709
		{
			yyVAL.exprmap = yyDollar[1].exprmap
			yyVAL.exprmap[yyDollar[3].expr] = yyDollar[5].expr
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:720
		{
			yyVAL.module = &ModuleImpl{Keyspace: yyDollar[1].expr, ParamDecls: yyDollar[2].decllist, Decls: yyDollar[3].decllist}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:723
		{
			yyVAL.expr = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:725
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:728
		{
			yyVAL.decllist = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line reflow.y:730
		{
			yyVAL.decllist = append(yyDollar[1].decllist, yyDollar[2].decllist...)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line reflow.y:733
		{
			yyVAL.decllist = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line reflow.y:735
		{
			yyVAL.decllist = yyDollar[2].decllist
			for _, d := range yyVAL.decllist {
				if d.Comment == "" {
					d.Comment = yyDollar[1].pos.comment
				}
			}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line reflow.y:744
		{
			yyVAL.decllist = yyDollar[3].decllist
		}
	}
	goto yystack /* stack new state and value */
}
